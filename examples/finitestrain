#! /usr/bin/env python3

from nutils import *


def makeplots( name, domain, ns ):
  sigma_dev = ns.stress - (function.trace(ns.stress)/domain.ndims) * function.eye(domain.ndims)
  vonmises = function.sqrt( ( sigma_dev**2 ).sum([0,1]) * 1.5 ) # TODO check fix for 2D
  points, colors = domain.simplex.elem_eval( [ ns.geom, vonmises ], ischeme='bezier3', separate=True )
  with plot.PyPlot( name ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.clim( 0, 1 )


class Elasticity( model.Model ):
  def __init__( self, domain, geom0, angle, lmbda, mu, linear ):
    self.domain = domain
    self.geom0 = geom0
    self.basis = domain.basis( 'spline', degree=2 ).vector( domain.ndims )
    self.lmbda = lmbda
    self.mu = mu
    self.linear = linear
    phi = angle * numpy.pi / 180
    a = numpy.cos(phi) - 1, -numpy.sin(phi)
    b = numpy.sin(2*phi), numpy.cos(2*phi) - 1
    x, y = geom0
    cons = domain.boundary['left,right'].project( x*(a+y*b), onto=self.basis, ischeme='gauss6', geometry=geom0 )
    super().__init__( cons )
  def namespace( self, coeffs ):
    disp = self.basis.dot( coeffs )
    geom = self.geom0 + disp
    eye = function.eye(len(geom))
    strain = disp.symgrad( self.geom0 ) if self.linear else .5 * eye - .5 * ( self.geom0.grad(geom)[:,:,_] * self.geom0.grad(geom)[:,_,:] ).sum(0)
    stress = self.lmbda * function.trace(strain) * eye + (2*self.mu) * strain
    return model.AttrDict( disp=disp, geom=geom, strain=strain, stress=stress )
  def residual( self, ns ):
    geom = self.geom0 if self.linear else ns.geom
    return model.Integral( self.basis['ni,j'] * ns.stress['ij'], domain=self.domain, geometry=geom, degree=7 )


def main( nelems=12, lmbda=1, mu=1, angle=20, restol=1e-10, trim=False, plots=True ):

  verts = numpy.linspace( 0, 1, nelems+1 )
  domain, geom0 = mesh.rectilinear( [verts,verts] )
  if trim:
    levelset = function.norm2( geom0 - (.5,.5) ) - .2
    domain = domain.trim( levelset, maxrefine=2 )

  model = Elasticity( domain, geom0, angle=angle, lmbda=lmbda, mu=mu, linear=True )
  lhs0 = model.solve( tol=restol )
  if plots:
    makeplots( 'linear', domain, model.namespace(lhs0) )

  model = Elasticity( domain, geom0, angle=angle, lmbda=lmbda, mu=mu, linear=False )
  lhs1 = model.solve( tol=restol, lhs0=lhs0 )
  if plots:
    makeplots( 'finite', domain, model.namespace(lhs1) )

  return lhs0, lhs1


def unittest():

  retvals = main( nelems=4, angle=10, plots=False )
  assert debug.checkdata( retvals, '''
    eNqtU0luBDEI/M5EsiP25UHz/y/EBvqS5JZII1FjFxiKalwvWagf6/WCz/XttzGD39sWukdFZHhvXYQp
    NzKQ36h4eXoSUPUCI/WbwGFFcBC6ERHwvc+LjHnjRseoC9YimF/C+U/cxAC5kZCsE4zraUyrxHTqBGcv
    ot6CJyZQJ+h96vTsat3CVM6oihRS/5msEn/KwK41vSJVZO+4USAbEFf3mwm0haiqF1j2CZFYc9hKxK3q
    DcxHPvPsOhbUwFlKwB0eUxAu+Q5GPeltAxtwwJzYXBlKg0BtkDrA2Z6rUSqtK9PRqAFZpxNLVT4++cUm
    gnF08KUQtfWzzOqVqHvm81bZBGYG0+sjX2haSxTHEsmtCYhUz2EVkNLsVIiz3SwRPXVsQ9UpetRUBNyz
    mGM5l6GlRbBsP/VopNLbd8V/sgkaQE2vUCpshvbNzpD2CUHieMCzXfGYgZTGHiJ9JeGPK6BPTmsyJ5N+
    bhqEUI49ng+FaD4x5nEF5ayelZ+hxycOw0lqzjGy/cUnH19iCe5m''' )


util.run( main, unittest )
