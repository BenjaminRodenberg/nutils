#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, velo, pres, index ):

  vortfunc = velo.grad(geom)[1,0] - velo.grad(geom)[0,1]
  bbox = -2.5, 10, -5, 5
  xy, uv = domain.elem_eval( [ geom, velo ], ischeme='uniform1', title='flow field', separate=False )
  points, flow, pres, vort = domain.elem_eval( [ geom, function.norm2(velo), pres, vortfunc ], ischeme='bezier9', separate=True )

  with plot.PyPlot( 'flow', index=index ) as plt:
    plt.mesh( points, flow, edgecolors='none', triangulate='bezier' )
    plt.xlim( bbox[:2] )
    plt.ylim( bbox[2:] )
    plt.clim( 0, 1 )
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )

  with plot.PyPlot( 'pres', index=index ) as plt:
    plt.mesh( points, pres, edgecolors='none', triangulate='bezier' )
    plt.xlim( bbox[:2] )
    plt.ylim( bbox[2:] )
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )

  with plot.PyPlot( 'vort', index=index ) as plt:
    plt.mesh( points, vort, edgecolors='none', triangulate='bezier' )
    plt.xlim( bbox[:2] )
    plt.ylim( bbox[2:] )
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )


def main( nelems=24, reynolds=100., strong=False, tol=1e-8, rotation=0., timestep=0, maxradius=50 ):

  #r(x)
  #r` = 2pi r / nelems => r = exp( 2pi x / nelems )
  #r(x0) = exp( 2pi x0 / nelems ) = Rin => x0 = log(Rin) * nelems / 2pi

  xmax = numpy.ceil( numpy.log(maxradius) / (2*numpy.pi/nelems) ).astype( int )
  log.info( 'creating %dx%d mesh, outer radius %.0f' % ( xmax, nelems, numpy.exp( (2*numpy.pi/nelems) * xmax ) ) )
  domain, geom = mesh.rectilinear( [range(xmax+1),numpy.linspace(0,2*numpy.pi,nelems+1)], periodic=(1,) )
  x, phi = geom
  r = function.exp( (2*numpy.pi/nelems) * x )
  geom = r * [ function.cos(phi), function.sin(phi) ]
  cyl_velo = rotation * function.stack([ function.sin(phi), -function.cos(phi) ])
  cylinder = domain.boundary['left']
  farfield = domain.boundary['right']

  vbasis = function.vectorize([ domain.basis( 'spline', degree=(2,1) ), domain.basis( 'spline', degree=(1,2) ) ])
  pbasis = domain.basis( 'spline', degree=1 )
  vbasis, pbasis, lbasis = function.chain([ vbasis, pbasis, [1.] ])

  # piola
  J = function.localgradient( geom, domain.ndims )
  detJ = function.determinant( J )
  vbasis = ( vbasis[...,_,:] * J ).sum(-1) / detJ
  pbasis = pbasis / detJ

  stress = 2 * vbasis.symgrad(geom) - pbasis[:,_,_] * function.eye( domain.ndims )

  A = function.outer( vbasis.grad(geom), stress ).sum([2,3])
  A += function.outer( pbasis, vbasis.div(geom) )
  A += function.outer( lbasis, pbasis )
  A += function.outer( pbasis, lbasis )

  stokesmat = domain.integrate( A, geometry=geom, ischeme='gauss9', title='stokes matrix' )

  cons = farfield.project( [1,0], geometry=geom, onto=vbasis, title='farfield bc', ischeme='gauss9', tol=1e-12 )
  if strong:
    stokesrhs = 0
    cons |= cylinder.project( cyl_velo, geometry=geom, onto=vbasis, ischeme='gauss9', title='cylinder bc', tol=1e-12 )
  else:
    ALPHA = .01 * nelems * reynolds
    weakterm = ALPHA * vbasis - 2 * vbasis.nsymgrad(geom)
    stokesmat += cylinder.integrate( function.outer( weakterm, vbasis ).sum(-1), geometry=geom, ischeme='gauss9', title='weak bc stokes matrix' )
    stokesrhs = cylinder.integrate( ( weakterm * cyl_velo ).sum(-1), geometry=geom, ischeme='gauss9', title='weak bc rhs' )
    cons |= cylinder.project( 0, geometry=geom, onto=vbasis.dotnorm(geom), ischeme='gauss9', title='cylinder bc', tol=1e-12 )

  lhs = stokesmat.solve( stokesrhs, constrain=cons )#, tol=1e-10, restart=9999, precon='spilu' )

  if timestep:
    inertia = (1./timestep) * function.outer( vbasis ).sum(-1)
    inertmat = domain.integrate( inertia, ischeme='gauss9', geometry=geom, title='adding inertia' )
    stokesmat += inertmat

  for iiter in log.count( 'iter' ):
    makeplots( domain, geom, vbasis.dot(lhs), pbasis.dot(lhs), iiter )
    ugradu = ( vbasis.grad(geom) * vbasis.dot(lhs) ).sum(-1)
    convection = reynolds * function.outer( vbasis, ugradu ).sum(-1)
    matrix = stokesmat + domain.integrate( convection, ischeme='gauss9', geometry=geom, title='navstokes matrix' )
    if timestep:
      rhs = stokesrhs + inertmat.matvec( lhs )
    else:
      rhs = stokesrhs
      res = matrix.res( lhs, rhs, constrain=cons )
      log.info( 'residual:', res )
      if res < tol:
        break
    lhs = matrix.solve( rhs, constrain=cons )#, tol=1e-10, restart=9999 )#, precon='spilu' )
  

def unittest():

  pass


util.run( main, unittest )
