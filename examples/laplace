#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, sol, index ):

  points, colors = domain.elem_eval( [ geom, sol ], ischeme='bezier4', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, .5*numpy.pi )
    plt.ylim( 0, .5*numpy.pi )


def main( nelems=None, degree=1, plots=True ):

  if nelems:
    verts = numpy.linspace( 0, .5*numpy.pi, nelems+1 )
    domain, geom = mesh.rectilinear( [verts,verts] )
  else:
    domain, geom = mesh.demo( xmax=.5*numpy.pi, ymax=.5*numpy.pi )
    if degree != 1:
      log.warning( 'setting degree=%d for triangular mesh' % degree )
      degree = 1

  x, y = geom
  exact = function.sin(x) * function.exp(y)
  flux = numpy.exp(.5*numpy.pi) * function.sin(x)
  dirichlet = function.sin(x)

  funcsp = domain.splinefunc( degree=degree )
  laplace = function.outer( funcsp.grad(geom) ).sum()
  matrix = domain.integrate( laplace, geometry=geom, ischeme='gauss4', title='matrix' )
  rhs = domain.boundary['top'].integrate( funcsp * flux, geometry=geom, ischeme='gauss6', title='rhs' )
  cons = domain.boundary['left,bottom'].project( dirichlet, ischeme='gauss6', geometry=geom, onto=funcsp, title='left,bottom edge' )
  lhs = matrix.solve( rhs, constrain=cons, tol=1e-8, symmetric=True )
  sol = funcsp.dot(lhs)

  if plots:
    makeplots( domain.refined, geom, sol, nelems )

  error = sol - exact
  err = numpy.sqrt( domain.integrate( [ error**2, ( error.grad(geom)**2 ).sum() ], geometry=geom, ischeme='gauss6', title='computing error' ) )
  log.user( 'errors: l2=%f, h1=%f' % tuple(err) )

  return err, rhs, cons, lhs


def conv( degree=1, nrefine=4 ):

  l2err = []
  h1err = []

  __log__ = log.range( 'refine', nrefine )
  for irefine in __log__:
    err, rhs, cons, lhs = main( nelems=2**irefine, degree=degree )
    l2err.append( err[0] )
    h1err.append( err[1] )

  h = (.25*numpy.pi) * .5**numpy.arange(nrefine)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


def unittest():

  retvals = main( degree=1, plots=False )
  assert debug.checkdata( retvals, '''
    eNqdkMEKAzEIRH9nFwxodDT5nB5y3f8/NroUll4KJYRHEmc0I3QYCU46DjfX1UCDHasZ7TtRi9WUOveZ
    FIleZxfPEv5afVfLoHxMWOFZsD2v10Wf3XaDbRjbcCDZhKes5qQITQKq2WkgLCmsnBM8XX7t3dRCPWXG
    veQdXh/6fwAJ4I7CtDjNioaidFR0HrceFpXq9MHlo3Hr2StSgVb9SecbwzRdyg==''' )

  retvals = main( nelems=4, degree=1, plots=False )
  assert debug.checkdata( retvals, '''
    eNqdkM2OwzAIhF8nkYjk4cfA4+wh17z/sYZutG3V08qyBj7MaGTQpgTbadtYc5yHkbouVVps0POA2Qvd
    vUPeegjyPOSvd5bXPoXt19JS5nk4HbBEFcqx3sYCzFrFRJklSXgvXT/X23VM+cZTLL5xDHSYT/6vMDYd
    pSHeIcDKZY7QWXqHw9BobuqlzGmlokDpHRYy++d4cPtwZu+pWvvd4aHxnCN6Lqztt3DPd9ofEi9qkQ==''' )

  retvals = main( nelems=4, degree=2, plots=False )
  assert debug.checkdata( retvals, '''
    eNqlUctuwzAM+50GsAG9ZX3ODrn2/4+TlBnruvZUBAEdkoopCcdNBuoxbjeUsHPaICE/p47kYOzHUKHI
    X4aTOqc8MAgU5+RHRgWfGAz+yxhJ1H/yuknB6feBzFE4FSEPKzNdONGE6+DqGTIGRkBV37/u/14143fa
    kqp/rUXEeqchAFT+V9pnHRB7p2VFK1SCTuiOWBhq/b27MrfmM1HPGGX1ZAlrjYlOWrg7RUC6fNFbojQW
    Mq32C/gq3N3vTaHXvek3bJ2XX/4FXb8nkn758a8nv19+bN8xjm/NbpQM''' )


util.run( main, conv, unittest )
