#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, greysmooth, index, indicator, supp ):

  xp, yp = topology.UnstructuredTopology( supp, domain.ndims ).elem_eval( geom, ischeme='contour2', separate=True ).T
  points, fval, xgrad, indic = domain.elem_eval( [ geom, greysmooth, greysmooth.grad(geom)[0], indicator ], ischeme='bezier4', separate=True )

  with plot.PyPlot( 'fval', index=index ) as plt:
    plt.mesh( points, fval, triangulate='bezier' )
    plt.plot( xp, yp, 'w' )
    plt.clim( -1, 1 )
    plt.colorbar()

  with plot.PyPlot( 'xgrad', index=index ) as plt:
    plt.mesh( points, xgrad, triangulate='bezier' )
    plt.plot( xp, yp, 'w' )
    plt.clim( 0, 18 )
    plt.colorbar()

  with plot.PyPlot( 'indicator', index=index ) as plt:
    plt.mesh( points, indic, triangulate='bezier' )
    plt.plot( xp, yp, 'w' )
    plt.colorbar()


def main( degree=2, niter=30, triangular=False, plot=True ):

  if triangular:
    if degree != 1:
      log.warning( 'warning: setting degree to 1 for triangles' )
      degree = 1
    domain, geom = mesh.demo()
  else:
    domain, geom = mesh.rectilinear( [ (0,.5,1) ] * 2 )

  greydata = function.tanh( ( function.norm2(geom) - .5 ) * 20 )

  __log__ = log.range( 'iter', niter )
  for iiter in __log__:

    funcsp = domain.splinefunc( degree=degree )
    greysmooth = domain.projection( greydata, geometry=geom, onto=funcsp, ischeme='gauss3', droptol=0, verify=int(funcsp.shape[0]) )
    indicator = ( greysmooth - greydata )**2

    weighted_residual = domain.integrate( funcsp * indicator, geometry=geom, ischeme='gauss3' )
    refine = weighted_residual.argsort()[-1:]
    supp = function.supp( funcsp, indices=refine )

    if plot:
      makeplots( domain, geom, greysmooth, iiter, indicator, supp )

    domain = domain.refined_by( supp )

  return weighted_residual


def unittest():

  retvals = main( degree=1, triangular=True, niter=6, plot=False )
  assert debug.checkdata( retvals, '''
    eNplkFsOxSAIRLfTJprwFhbU/W/hClX7cb8GjjMExHZJQ73bZRT8dJwdOc0CGweOWUBTGpNEI1R9+ji6
    +TGeKAlYEQb3KogQn+4TsGV268eXUUIhgThFzdoAlxOHWiqRYm3h+vIwzm2cWWqSS64Z38Pq/4IAdc5W
    sfGeI4hcxXBekwjKuXTzk+BQrx9xpBxtAJG9RkhxC61r1/vu7x9BJVWy''' )

  retvals = main( degree=1, triangular=False, niter=11, plot=False )
  assert debug.checkdata( retvals, '''
    eNpNkOsNBCEIhNvZS7zE4SkFbf8t3MqCuV8oznwDYlwyoJ9xETTubwwOm/cXNGQu3Q24PBUYxvIo1gBh
    5YP5+9DW4ygBsVsK4MHJPPADPZCjAecTjwiXPGAWJ5bwm6iOTDC2TGwFMPdhDgjlDOoycy0s2vUgWkDO
    ureyoKxsIrsKa6I7qkGtg+C5+7NkIH1suXz7u98j9gDNbT1hZl+XU92Lo3hXs+RxcOZjRfrVnOuTy8er
    vsRTB8g///DK3/rO7ZzDLc6Zp/I7r/mfH0o8fyU=''' )

  retvals = main( degree=2, triangular=False, niter=12, plot=False )
  assert debug.checkdata( retvals, '''
    eNpVVFGu2DAIu84m9UlxgAAH2v2vsDQQd/sqCjEYmxTPL31gv59fQM4/P/m4Kf78YO4gbAc73ZlY+h7g
    0Yl9AHlCRXdgH4ip/c1Cy3xT66tHFFMLbyYesSyQTxmnjPnUUzgj8jQ3ZAUTWT2nqtbl9FV0LhyR69yB
    Tjko2HhT49mgVSeS1QI+C6VzFUF2/+DqduAuOk8gM/yk0g8xeRxHDN3ETi/7yLM74TOWvOIaDp19MM6V
    XQ9WYwGQE0iIn3oXlIBWuaGj1ekyPJlDSiYKx8lJnT2pKUXhVKRDuakXByZTOkEpqcU3hM2i4cjqHphR
    J3PWpq1h1gzPXu2UAP9y3oKpyAk2wVIjVKsOUuuyRVYdrOPEi2oDYPC2JEsNjFVwhdSJSXfXmmtLl6PE
    zBi9+S7oFquJ+fXYo08Gyp39OIqGjKPqrrw8S/kLN+07MSIKpW/T/RC3lXd0dNALtlS9HgXVvYJRA45F
    gl+HY3Lu77LzM7jWUG0KSE043aV3wTKyjKGvtIrqUxHORO9pJx2i+pSPAnBR6D3tpFXUmmpxq7go9P7z
    9RrzSTtG65foyimjOTd5Q786IOS+Q+nlti4o7yt+78w2BN5P1BH934rodY9LPnqcrRNfgv/f9KtM+KVK
    PmzKypyCVMmHTTkgpyBV8vn9F/KIXbI=''' )


util.run( main, unittest )
