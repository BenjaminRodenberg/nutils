#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, stress ):

  points, colors = domain.simplex.elem_eval( [ geom, stress[0,1] ], ischeme='bezier3', separate=True )
  with plot.PyPlot( 'stress', ndigits=0 ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.xlim( 0, 1.5 )


def main( nelems=None, maxrefine=2, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  levelset = function.norm2( geom ) - .5
  domain, complement = wholedomain.trim( levelset, maxrefine=maxrefine, check=False )
  dspace = domain.splinefunc( degree=degree ).vector( 2 )

  support = domain.integrate( function.norm2( dspace ), geometry=geom, ischeme='gauss6' )
  cons = util.NanVec( len(support) )
  cons[ support==0 ] = 0
  cons |= domain.boundary['left,right'].project( geom*[.5,0], geometry=geom, ischeme='gauss6', onto=dspace )
  cons |= domain.boundary['right'].project( [.5,0], geometry=geom, ischeme='gauss6', onto=dspace )

  elasticity = function.outer( dspace.grad(geom), stress(dspace.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dspace.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)) )

  return lhs, cons


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqFUMsKAyEM/B0FLXmrn9PDXvf/jzXqFrstFJSZmJlJEFOQhBpTCNwMjyxJAcCR0diRjMgRa60DycwR
    Hn5QG6yKlUaAaJ24hGLQ5nuxfcCFwiyfg6c/U0E9snl2VtUeoikzMAxSSHgQKrM1F+qCKstFWNQ7WEwc
    WepQKtDIEPBJlxObyKpoCfu/nM/zvZnz/U7fYvfmbtwD7mE/rH9zvwQxxRctim72''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9kUtuQzEIRbfzItkVcPnYy8kg0+x/WAOVqlSdZNBKtg7gi8GYx6WD7TauS1T0MTHo43tNVl4Z3Grx
    mEe6WZMucWjDgpBcbOVrgPJcIywJ2ZwUxup87GbmpY686GgSSg+10oP3FzlaF821Wh/c9U4jTZIipGhE
    9A5lZd8/huBi1dQEad0q5pyvnaK2y0CIleG+ahBCObAzoJ2N+RCwtwBsGZhmmyoSsirXtO9wbqlx+6yK
    LgJuw8QrVUlKCUgVBS3vjKjik6UPJnZ2bi/v6nW+/nl/voTS/8v97qf8d3+/Den2CY0Ix2M=''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9UTluAzEM/I4NSAFvSs9J4db/LyMOF8iBNC4SQMJI5AxPHjcb7Pdxu4kveUwd9PZ5JrvuMm6PfMxD
    3RyFIXnsPjwpChcHFVqqlN9ycaHKhk7YqPUVr5C0eQy7RfuN1KAzB095X8jZvFzAtfLSI495XkidXwXo
    RPQKyq4+fwwhr+KnUldzRoXup1gwHoq+zyNiwyKkjgFZNRpDpAovglWMGNODWpKy4XJdwKBl+DODwGbU
    SZQ7hkuAYcTA48AW9FKyZYLIItrSbSjra199zuqf789vpvr/5X11Kf9d329Dun8A5g3Hig==''' )


util.run( main, unittest )
