#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, sigma, index ):

  sigma_dev = sigma - (function.trace(sigma)/domain.ndims) * function.eye(domain.ndims)
  vonmises = function.sqrt( ( sigma_dev**2 ).sum([0,1]) * 3./2 ) # TODO check fix for 2D

  points, colors = domain.simplex.elem_eval( [ geom, vonmises ], ischeme='bezier5', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1.3 )
    plt.ylim( 0, 1.3 )


def main( nelems=None, maxrefine=2, radius=.5, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  # plane strain case (see e.g. http://en.wikiversity.org/wiki/Introduction_to_Elasticity/Plate_with_hole_in_tension)
  x, y = geom / radius
  r2 = x**2 + y**2
  uexact = .2 * geom * ( [1-stress.nu,-stress.nu] + [2-2*stress.nu,2*stress.nu-1]/r2 + (.5-.5/r2)*[x**2-3*y**2,3*x**2-y**2]/r2**2 )

  levelset = function.norm2( geom ) - radius
  domain, complement = wholedomain.trim( levelset, maxrefine=maxrefine, check=False )
  dbasis = domain.basis( 'spline', degree=degree ).vector( 2 )

  cons = domain.boundary['left'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,0] )
  cons |= domain.boundary['bottom'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,1] )
  cons |= domain.boundary['top,right'].project( uexact, geometry=geom, ischeme='gauss6', onto=dbasis )

  elasticity = function.outer( dbasis.grad(geom), stress(dbasis.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dbasis.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)), index=nelems )

  error = disp - uexact
  err = numpy.sqrt( domain.integrate( [ (error**2).sum(-1), ( error.grad(geom)**2 ).sum([-2,-1]) ], geometry=geom, ischeme='gauss7' ) )
  log.user( 'errors: l2={}, h1={}'.format(*err) )

  return err, cons, lhs


def conv( degree=1, nrefine=4 ):

  l2err = []
  h1err = []

  for irefine in log.range( 'refine', nrefine ):
    err, cons, lhs = main( nelems=2**(1+irefine), degree=degree )
    l2err.append( err[0] )
    h1err.append( err[1] )

  h = .5**numpy.arange(nrefine)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNplkEuOxCAMRK+TSHjkv/FxetHbvv9yMISoJyOBykaU4RW1QxvZ2Y6De+AbvBkqv8HaOPu8Po3CRzsu
    kWhpnTl5rytV40+tqyp5btagMjIH7wGU6buuDUZkNRFc1fZo6Cx5N+mou/nef18fAiliRTJt7ITbNpBI
    c+E8sLLLpN5ohuGlCy/E+tWR2zQyYUxFWsq2MK+BT2zq9Sm90UlcSkEJ58v/MwAbzLPYQUDkCuFOA7qi
    L1dqLBdzXoXuXwMjxq5dxSuf76yAL/A7MBBflrOdv+D0gX4=''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdUstuAzEI/J1EWioY87A/p4dc8//H2uAkbZW9RNoVmMGAZ5DjoofY9bhcTJrfKA7h1m9kx4zdv+8H
    f72+df7/g4es9HeYq9kZJrPPjfQ9ZpYYdI2S1tLCJC1LnqUjcQn3d7VotIizASZoY4FvHkadB84wN4sz
    zNQf90gGZn2fDnMGCdo5HUUkaWRStSbZImvW9odwima8XjaJGMsOZV/5CKRImE7arQJQrAKuyYz2PHeP
    fKtHTfBQBqi6M5+LUa57rSfTkvPpUy005W2TcYhgK1GKuGT8UwWrX5vEdC6GBuvYDnZki0qC0TJ5TpNT
    UEgUwd29nCHQfeupNinb1mEHycYuHqZeFV4bYM1nwz4bKlfnZiUzWUg5v5aCIFHCD0ekA8duaLvz54ty
    /QFkLOId''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdkkluwzAMRa/jAGbBmdJxuvA2919WIuU0LexNABuk9KmB74v2TXeyx75thtIPiJ2Q4wDbx9zz+7nj
    1+83x/9/xk6z/EpzNbvTiFAO0GvNLDVWaStaRjbKiJRjapw6hfvVXtAl4u4CQ7Q+xYvGoGHnO83N4k4z
    9XMdUOexv48EMSeBtWEmypHQwMhO2ESuB8gf4BAe2aEqZ4ddMe/MIZJxJBmXC8xFlbmIkLYk1bzlFcZ2
    WXc6w9xx1VMRxSIrrcZ5P325xaK0Yu7PRLycqHVOde6HDhL1NiGARWSj0FFlJVzMTlOBZEIZxSwTnQ5c
    VPihuXkVE+ta9XIbFL1UlShDrHPygDAt6e0FCE6xjQMVW4pivvwLqgPfHgUwTVOG8d0pMhl0q5uBfR34
    8UN5/ABtKuIm''' )


util.run( main, conv, unittest )
