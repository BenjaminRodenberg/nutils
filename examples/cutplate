#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, stress ):

  points, colors = domain.simplex.elem_eval( [ geom, stress[0,1] ], ischeme='bezier3', separate=True )
  with plot.PyPlot( 'stress', ndigits=0 ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.xlim( 0, 1.5 )


def main( nelems=None, maxrefine=2, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  levelset = function.norm2( geom ) - .5
  domain, complement = wholedomain.trim( levelset, maxrefine=maxrefine )
  dspace = domain.splinefunc( degree=degree ).vector( 2 )

  support = domain.integrate( function.norm2( dspace ), geometry=geom, ischeme='gauss6' )
  cons = util.NanVec( len(support) )
  cons[ support==0 ] = 0
  cons |= domain.boundary['left,right'].project( geom*[.5,0], geometry=geom, ischeme='gauss6', onto=dspace )
  cons |= domain.boundary['right'].project( [.5,0], geometry=geom, ischeme='gauss6', onto=dspace )

  elasticity = function.outer( dspace.grad(geom), stress(dspace.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dspace.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)) )

  return lhs, cons


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqFkEsOwyAMRK+TSFD5bzhOF93m/svGmLb0I1UCvQEzYwssmxTUvWwbd8NblaIAEGQ0DpIRBbG1Nkhm
    QbjEQu0wT6w0pGhLkumgQct717XBg8Is743TX8nxnMgiu6rqGaKlMlAKJ6EhyLOUA1VG0ukijI5a0J2D
    LN2DOjMEmryc2MXmiaSPwvkvx/V4ThZ63emb6rO4GteAz7Af1r+5Xw/2st8BJ+pu9A==''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9kc1uxCAMhF8nK0Flj395nB5y3fc/NtiRqlV72UMrEX3gzBgYeBw62B7jOJDE55RBH99jsq4qLrV1
    zku6QJuOwDltWFBsJptuakj914jYFCzdBCu1X+4+JK2j0qlLkwTlu/cTXjf51nVfzWwGc9HiJpVfBUUj
    oneIVPwIwZfXIaaQZqnM67YT6lYTCVQO0z1rAvIOKOOy+IBwKx17Bx/TLFdVAiklVfZNZ6ZaM6rOqt1b
    pMOeBqtmSq0QARcpvR3RrRlAWyt3e7lXj+vpn5/Pl9Je/+X37qP89/l+C+nxBdZIx4k=''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9kTtuRDEIRbczI9kRn4sxy0kx7ey/jIEnJVHSTJFItg7G/OFxw2C7j9tNnPGYOujt80w27FSGgR7z
    mAZHcokfvQ1zWsnNFkm4cv7DtyRVwpPC4PbXaJK2HVdcrNaDFOUHq7dyXGRvu8x7uLdf/p3P/CJVXqgU
    jYheoQTtH0NwiUo6lTqrWFB2O+XUXYJW30dYK0oQQtGQH2uIbLQByFMxzaJGmOEriGlHXbR7tszlwoB0
    Em3FNFkVHMSWPB+1hVPf5eG1jckil2ugYn/tq89Z/fP9+U2V77+8ry7lv+v7bUj3D+CNx4Q=''' )


util.run( main, unittest )
