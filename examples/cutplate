#! /usr/bin/env python

from nutils import *


@util.withrepr
def Hook( lmbda, mu ):
  return lambda disp, coords: \
    lmbda * disp.div(coords)[...,_,_] * function.eye( coords.shape[0] ) \
  + (2*mu) * disp.symgrad(coords)


def main( nelems=10, stress=Hook(1,1) ):

  verts = numpy.linspace( 0, 1, nelems+1 )
  wholedomain, coords = mesh.rectilinear( [verts,verts] )
  dspace = wholedomain.splinefunc( degree=3 ).vector( 2 )
  levelset = function.norm2( coords ) - .5
  domain = wholedomain.trim( levelset, maxrefine=3 )

  support = domain.integrate( function.norm2( dspace ), coords=coords, ischeme='gauss3' )
  cons = util.NanVec( len(support) )
  cons[ support==0 ] = 0
  cons |= wholedomain.boundary['left,right'].project( coords*[.5,0], coords=coords, onto=dspace )
  cons |= wholedomain.boundary['right'].project( [.5,0], coords=coords, onto=dspace )

  elasticity = function.outer( dspace.grad(coords), stress(dspace,coords) ).sum([2,3])
  matrix = domain.integrate( elasticity, coords=coords, ischeme='gauss3' )
  lhs = matrix.solve( constrain=cons, tol=1e-5, symmetric=True )
  disp = dspace.dot( lhs )

  points, colors = domain.elem_eval( [ coords + disp, stress(disp,coords)[0,1] ], ischeme='bezier3', separate=True )
  with plot.PyPlot( 'dspace' ) as plt:
    plt.mesh( points, colors )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.xlim( 0, 1.5 )


util.run( main )
