#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, velo, pres, index ):

  xy, uv = domain.elem_eval( [ geom, velo ], ischeme='uniform2', title='flow field', separate=False )
  points, velo, pres, div = domain.elem_eval( [ geom, function.norm2(velo), pres, velo.div(geom) ], ischeme='bezier5', separate=True )

  with plot.PyPlot( 'velo', index=index, ndigits=4 ) as plt:
    plt.mesh( points, velo, triangulate='bezier' )
    plt.clim( 0, 1 )
    plt.colorbar()
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )

  with plot.PyPlot( 'pres', index=index, ndigits=4 ) as plt:
    plt.mesh( points, pres, triangulate='bezier' )
    plt.colorbar()

  with plot.PyPlot( 'div', index=index, ndigits=4 ) as plt:
    plt.mesh( points, div, triangulate='bezier' )
    plt.colorbar()


def main( nelems=8, reynolds=2e3, warp=False, tol=1e-8, plot=True, solvetol=1e-10, maxiter=numpy.inf ):

  verts = numpy.linspace( 0, 1, nelems+1 )
  domain, geom = mesh.rectilinear( [verts,verts] )
  pbasis = domain.basis( 'spline', degree=1 )
  vbasis = function.vectorize([
    domain.basis( 'spline', degree=(2,1), removedofs=((0,-1),None) ),
    domain.basis( 'spline', degree=(1,2), removedofs=(None,(0,-1)) ) ])

  if warp:
    x, y = geom
    geom = (y+2) * function.rotmat(x*.4)[:,1] - (0,2) # slight downward bend
    J = function.localgradient( geom, domain.ndims )
    detJ = function.determinant( J )
    vbasis = ( vbasis[...,_,:] * J ).sum(-1) / detJ # piola transform
    pbasis = pbasis / detJ

  vbasis, pbasis, lbasis = function.chain([ vbasis, pbasis, [1.] ])

  stress = (2./reynolds) * vbasis.symgrad(geom) - pbasis[:,_,_] * function.eye( domain.ndims )

  A = function.outer( vbasis.grad(geom), stress ).sum([2,3])
  A += function.outer( pbasis, vbasis.div(geom) )
  A += function.outer( lbasis, pbasis )
  A += function.outer( pbasis, lbasis )

  stokesmat = domain.integrate( A, geometry=geom, ischeme='gauss9', title='stokes matrix' )

  utop = geom.tangent([1,0]).normalized()

  alpha = .01 * nelems # stabilization
  nietzsche = alpha * vbasis - (2./reynolds) * vbasis.nsymgrad(geom)
  stokesmat += domain.boundary.integrate( function.outer( nietzsche, vbasis ).sum(-1), geometry=geom, ischeme='gauss9', title='weak bc stokes matrix' )
  rhs = domain.boundary['top'].integrate( ( nietzsche * utop ).sum(-1), geometry=geom, ischeme='gauss9', title='weak bc rhs' )

  precon = stokesmat.getprecon( 'splu' ) if solvetol else None
  lhs = stokesmat.solve( rhs, tol=solvetol, precon=precon )
  for iiter in log.count( 'picard' ):
    if plot:
      makeplots( domain, geom, vbasis.dot(lhs), pbasis.dot(lhs), iiter )
    ugradu = ( vbasis.grad(geom) * vbasis.dot(lhs) ).sum(-1)
    convection = function.outer( vbasis, ugradu ).sum(-1)
    matrix = stokesmat + domain.integrate( convection, ischeme='gauss9', geometry=geom, title='navstokes matrix' )
    res = matrix.res( lhs, rhs )
    log.info( 'residual:', res )
    if res < tol or iiter >= maxiter:
      break
    lhs = matrix.solve( rhs, tol=solvetol, precon=precon, restart=999 )

  return lhs, res


def unittest():

  retvals = main( nelems=4, reynolds=1e3, warp=False, tol=0, maxiter=1, plot=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNpFkettAzEMg9dJALsw9bQGyv4r1BYv7S8dJIr+xMN42YC/x+s1XbZ/pg/LpbdOaMln2gjTvA2sK7Ax
    pdZqhUCNnb3X/ZBcuNUKuwcmVpRWUYqolqK8Jb6zXQOgqW+AKzviTtSjgdyzzb+g0yCtFM0G/QMELvkZ
    GBtaaXwT7RhpZzFGSTx0wRMtdxIC+eVW0DP9OcDRo39gBwML2ZR8SREM6tRWIM2aa0X3Y1Vw7sm+NPfM
    VLmA88TXj2nopgOMG3Q6GSSJS3eQAqtTOcfWI9Unz2Vtqk88s+qeEEdSdIWRpxisii4G7B3w+hnvk/L9
    6TrevwShfCg=''' )

  retvals = main( nelems=4, reynolds=1e3, warp=True, tol=0, maxiter=1, plot=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNpVUOuNgzEIW6eVkhPmzUDdf4Um8Ol09yuAHduA9dIFe6/Xa6MoP9sWVPS+W0n9FqzRA0ZKA+Zan+1r
    ezj3xMsaCk60hujpdW0wRTNSLEdV2G7h5DV2Qz323W+OAXbo+AEP09kf5kiVVecICP8L6IFowMYLNB7m
    0wtfBT9KmHQB2B0YUb8b9sQN6FCksicF1vn75BXnKZBOs/QTtLIONVZV8H2Bmq+R42bUMSsDjXM0fjZX
    uoMNzQ7KacMMGiWSySkYqe0ZUyhJHwU0yDlSthb/FsdnloTRUDwu4pLNgN17Hlcv/F2Vftb7LKN2l3t/
    ARObfLY=''' )


util.run( main, unittest )
