#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, velo, pres, index ):

  xy, uv = domain.elem_eval( [ geom, velo ], ischeme='uniform1', title='flow field', separate=False )
  points, velo, pres, div = domain.elem_eval( [ geom, function.norm2(velo), pres, velo.div(geom) ], ischeme='bezier5', separate=True )

  with plot.PyPlot( 'velo', index=index, ndigits=4 ) as plt:
    plt.mesh( points, velo, edgecolors='none', triangulate='bezier' )
    plt.clim( 0, .9 )
    plt.colorbar()
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )

  with plot.PyPlot( 'pres', index=index, ndigits=4 ) as plt:
    plt.mesh( points, pres, edgecolors='none', triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )

  with plot.PyPlot( 'div', index=index, ndigits=4 ) as plt:
    plt.mesh( points, div, edgecolors='none', triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )


@util.withrepr
def Gauss( center, width, height ):
  return lambda x: height * function.exp( -((x-center)/width)**2 )


def main( nelems=16, reynolds=2e3, bump=Gauss(.75,.25,.25), strong=False, tol=1e-8, timestep=0, plot=True ):

  verts = numpy.linspace( 0, 1, nelems+1 )
  domain, geom = mesh.rectilinear( [verts,verts] )
  vx, vy = function.chain([
    domain.splinefunc( degree=(3,2), removedofs=((0,-1),None) ),
    domain.splinefunc( degree=(2,3), removedofs=(None,(0,-1)) )
  ])
  vspace = function.stack( [ vx, vy ], axis=1 )
  pspace = domain.splinefunc( degree=2 )

  if bump:
    x, y = geom
    y_bump = domain.projection( bump(x) * (1-y) + y, onto=domain.splinefunc( degree=2 ), geometry=geom, ischeme='gauss9' )
    geom = function.stack([ x, y_bump ])
    # piola
    J = function.localgradient( geom, domain.ndims )
    detJ = function.determinant( J )
    vspace = ( vspace[...,_,:] * J ).sum() / detJ
    pspace = pspace / detJ

  vspace, pspace, lspace = function.chain([ vspace, pspace, [1.] ])

  stress = 2 * vspace.symgrad(geom) - pspace[:,_,_] * function.eye( domain.ndims )

  A = function.outer( vspace.grad(geom), stress ).sum([2,3])
  A += function.outer( pspace, vspace.div(geom) )
  A += function.outer( lspace, pspace )
  A += function.outer( pspace, lspace )

  stokesmat = domain.integrate( A, geometry=geom, ischeme='gauss9', title='stokes matrix' )

  if strong:
    stokesrhs = 0
    cons = domain.boundary['top'].project( 1, geometry=geom, onto=vspace[:,0], ischeme='gauss3', title='top boundary' ) \
         | domain.boundary.project( 0, geometry=geom, onto=vspace, ischeme='gauss3', title='other boundary' )
  else:
    ALPHA = .01 * nelems * reynolds
    Utop = [1,0]
    weakterm = ALPHA * vspace - 2 * vspace.nsymgrad(geom)
    stokesmat += domain.boundary.integrate( function.outer( weakterm, vspace ).sum(), geometry=geom, ischeme='gauss9', title='weak bc stokes matrix' )
    stokesrhs = domain.boundary['top'].integrate( ( weakterm * Utop ).sum(), geometry=geom, ischeme='gauss9', title='weak bc rhs' )
    cons = None

  if timestep:
    inertia = (1./timestep) * function.outer( vspace ).sum()
    inertmat = domain.integrate( inertia, ischeme='gauss9', geometry=geom, title='adding inertia' )
    stokesmat += inertmat

  precon = stokesmat.getprecon( 'splu' )
  stokeslhs = stokesmat.solve( stokesrhs, constrain=cons, tol=1e-10, precon=precon )

  __log__ = log.count( 'iter' )
  lhs = stokeslhs
  for iiter in __log__:
    if plot:
      makeplots( domain, geom, vspace.dot(lhs), pspace.dot(lhs), iiter )
    ugradu = ( vspace.grad(geom) * vspace.dot(lhs) ).sum()
    convection = reynolds * function.outer( vspace, ugradu ).sum()
    matrix = stokesmat + domain.integrate( convection, ischeme='gauss9', geometry=geom, title='navstokes matrix' )
    if timestep:
      rhs = stokesrhs + inertmat.matvec( lhs )
    else:
      rhs = stokesrhs
      res = matrix.res( lhs, rhs, constrain=cons )
      log.info( 'residual:', res )
      if res < tol:
        break
    lhs = matrix.solve( rhs, constrain=cons, tol=1e-10, precon=precon )

  return stokeslhs, iiter, lhs


def unittest():

  retvals = main( nelems=4, reynolds=1000, bump=None, strong=False, tol=1e-3, timestep=0, plot=False )
  assert debug.CmpData( retvals ) == '''
    eNqtVluSHDEIu86mMu0ybzhQ7n+F4DZ4XPnOH+sCNRKCWf78/DwwphH9eSZ+cMwIeMOHB4riG9OIwNjP
    ONR5ZcNHBpDAG9JgNsmQPo8MAa9sHbiz38oAlzcdBonFG3pi8wZ5aEyQubMtu+LzTbDgnYPDSTcKDyLx
    QpmB+h9b+R+iXBhJDbDoxFAm60Kier4KF/mYm4OOyLgKQwAqOQysvpJtNBeAiGoaxHajMEy1c7NPP2LP
    FvsqfK7K5yp9rtqr9Or0uVp9rl6fq9nn6vbW+JLnufS55HlufbJSVf/8nnOxAz/gSFNPu/nHm7LklNjp
    qxlJ9N87x0jj6yuRlj+2hTampSne2uUV9bc2HYSADWkA3KqK0OnSTGfH7gUj2c3cZkk/kZvW80G5QC6M
    C+K5MC6Ii89F52Jzkbm4PBeZS9nnkvZS9hL20vWS1QbrWgzQz68PwOcnJzoJvMzoE+no404Fyspfi4BZ
    sYDZzzFAHQpkhs+em0JxzuUk2W7RoWTce2qEPR03xLN6EdHviHI+aei9TlKNaDLomfkgNegFydi6E3Qs
    G+gw0b0WeT6ctVBY0HqFJLhvA4XgdxMZG8RNzlYaMb+AkqMtQpewKyOvZ3FQpa/INP1fNRMaZMFxjgvg
    DCeE+6AL1G2NQdyHbh0EoXNhhAvYtJqGPuHvN0SjgDmceo/Jv3DsoOVSWTau7OnndhjQ0Uaib0dqJnCE
    Z+w4dc1x1+BviY1gnripLXhz7fjomizE9nKk89X99TgOwWn1ymKzNkaDcC+SD15m3M+sPiuZpmBBgNKB
    iMmdgKxvyEMo6LzKBl6s+CwrGMmO08+IpxCUaxdJuSeKSHAwsOo4p9RHMK2d29TYaVA4R0Fm1LFTtw5j
    UisjbNrJuDyy1z/6xqSJVLTq0AMqTDkaQtXlQKyf1s3FZ90mWv8GrLr6lZ3pC+A8LL/+AvUn1D4='''


util.run( main, unittest )
