Changelog
=========

Nutils is under active development and the API is not frozen. Active
users are advised to keep an eye on this file to stay up to date with
the most prominent user-facing changes.


Changed: caching function return values

  The CallDict mechanism for caching function calls by arguments has
  been split up in Wrapper and WrapperCache. Wrapper is a function
  decorator that caches return values of a single function based on its
  arguments. WrapperCache maintains a dynamic collection of Wrapper
  instances.

  Old syntax:
  >> fcache = cache.CallDict()
  >> retval = fcache( func, arg1, arg2 )

  New syntax:
  >> fcache = cache.WrapperCache()
  >> retval = fcache[func]( arg1, arg2 )

  Alternative new syntax:
  >> wrapped_func = cache.Wrapper(func)
  >> retval = wrapped_func( arg1, arg2 )


Changed: linear solver arguments

  The initial vector 'x0' has been renamed to 'lhs0' for consistency
  with the (unchanged) 'rhs' argument. A tol=0 value still defaults to a
  direct solver if no 'solver' was specified explicitly, but it has been
  changed to a faster sparse direct solver. A nonzero 'info' value
  causes solve to return a (lhs,info) tuple, with info containing all
  the .res residuals and a .niter iteration count.


Changed: Topology.elem_eval returns a list if separate=True

  Data returned by elem_eval used to contain nan-values as separation
  markers if separate=True. In the new implementation the data is
  split into a list of arrays, matching the number and ordering of the
  elements in the topology. The functions in the plot module have been
  updated to support (and demand) the new data type.


Changed: properties dumpdir, outdir, outrootdir

  Two global properties have been renamed as follows:
  - dumpdir -> outdir
  - outdir -> outrootdir

  The outrootdir defaults to ~/public_html and can be redefined from the
  command line or in the .nutilsrc configuration file. The outdir
  defaults to the current directory and is redefined by util.run,
  nesting the name/date/time subdirectory sequence under outrootdir.
  For manual access, the new convenience function `core.getoutdir`
  handles directory creation and returns the path.


Changed: sum axis argument

  The behaviour of function.sum and ArrayFunc.sum is inconsistent with
  that of the numpy counterparts. In case no axes argument is specified,
  numpy sums over all axes, whereas nutils sums over the last axis. To
  undo this mistake and transition to numpy's behaviour, calling sum
  without an axes argument is deprecated and will be forbidden in nutils
  3.0. In nutils 4.0 it will be reintroduced with the corrected meaning.

  Old syntax:
  >> A.sum()
  >> function.sum( A )

  New syntax:
  >> A.sum( -1 )
  >> function.sum( A, -1 )


Changed: strict dimension equality in function.outer

  Function.outer allows arguments of different dimension by left-padding
  the smallest prior to multiplication. There is no clear reason for
  this generality and it hinders error checking. Therefore in future in
  function.outer( a, b ), a.ndim must equal b.ndim.

  In a brief transition period non-equality emits a warning.


Reverted: log iterators

  Manually setting the __log__ property is removed and the old notation
  is reintroduced. The change is backwards incompatible, in a way that
  an warning is issued and output is written to a fallback stream in
  case __log__ is manually overwritten. Update your code as follows:

  Removed syntax:
  >> __log__ = log.iter( 'elem', topo )
  >> for elem in __log__:

  Restored syntax:
  >> for elem in log.iter( 'elem', topo ):


Changed: Evaluable base class

  Relevant only for custom Evaluable/ArrayFunc objects. The evalf method
  changes from constructor argument to instance/class method.

  Old syntax:
  >> class MyEval( function.Evaluable ):
  >>   def __init__( self, .. ):
  >>     function.Evaluable( args=[..], evalf=my_static_function, shape=.. )

  New syntax:
  >> class MyEval( function.Evaluable ):
  >>   def __init__( self, .. ):
  >>     function.Evaluable( args=[..], shape=.. )
  >>   def evalf( self, .. ):
  >>     ..

  Moreover, the `args` argument may only contain Evaluable objects.
  Static information is to be passed through `self`.


Removed: _numeric C-extension

  At this point nutils is pure Python. It is no longer necessary to run
  make to compile extension modules. The numeric.py module remains
  unchanged.


Changed: periodic boundary groups

  Touching elements of periodic domains are no longer part of the
  `boundary` topology. It is still available as boundary of an
  appropriate non-periodic subtopology.

  Old syntax:
  >> domain.boundary['left'] # periodic boundary

  New syntax:
  >> domain[:,:1].boundary['left']


Changed: gmesh reader

  Argument 'btags' renamed to 'tags'. Applies to all elements (boundary
  and interior). New optional argument 'use_elementary' to indicate
  whether gmesh is used without physical groups (default False).


New: diag preconditioner

  New syntax:
  >> matrix.solve( rhs, symmetric=True, precon='diag' )

  Simple diagonal scaler, also available via matrix.get_precon('diag').


Changed: Hooke and Orthotropic

  Old syntax:
  >> library.Hooke( disp, geometry )

  New syntax:
  >> library.Hooke( disp.symgrad(geometry) )

  Likewise for Orthotropic. The argument represents the strain tensor
  and should be symmetric in the last two axes.


Changed: trimming

  New syntax:
  >> domain, complement = wholedomain.trim( levelset, maxrefine=3, eps=.01 )

  The two returned topologies add up to wholedomain. The evalrefine
  argument vanished; evaluation takes place at the lowest possible
  level.


New: DG examples

  New example scrips advec and burgers demonstrate and test 1D/2D
  discontinuous galerkin computations.


New: util.withrepr supports default values

  Unchanged syntax:
  >> @util.withrepr
  >> def f( a, b=2 ):

  Default values are now handled appropriately.


New: 1D plot.mesh

  Unchanged syntax:
  >> xy, c = domain.elem_eval( [ geom, func ], ischeme='bezier2' )
  >> with plot.Pyplot( 'func' ) as plt:
  >>   plt.mesh( xy, c )

  Mesh now extends to 1D domains.


New: transform module

  Objects and operations for affine coordinate transformations.


New: rational module

  New syntax:
  >> s = rational.frac( 2, 3 ) # Scalar: 2/3
  >> A = rational.frac( [[2,-3],[0,1]], 3 ) # Array: [[2/3,-1],[0,1/3]]

  Objects and operations for doing exact rational arithmetic.


New: variable exponent in function.Power

  Unchanged syntax:
  >> a**b

  The exponent `b` can now be a nutils function.


New: makefile test rules

  New makefile rules:
  # make test
  # make test_nose
  # make test_examples

  Make test runs test_nose and test_examples in sequence. Test_nose
  calls nosetest on the tests directory. Test_examples calls the
  unittest target of all scripts in the examples directory in sequence.


New: data comparison

  New syntax
  >> s = debug.base64_enc( myobj, ndig=4, ndec=15 )
  >> debug.base64_dec( s ) == myobj # True
  >> debug.checkdata( myobj, s ) # True

  Data serialization useful for embedded result checking. Floats are
  stored up to `nsig` significant digits or `ndec` decimals. Checkdata
  performs float comparisons up to corresponding precision.

  All examples have a unittest target to verify consistency of results.
  Users are strongly encouraged to follow this example.


New: numeric integer methods

  New syntax
  >> a = numeric.round( [.2, 1.2 ] )
  >> a = numeric.floor( [.2, 1.2 ] )

  Identical to numpy.round, numpy.floor, except the return dtype is
  integer.


Changed: traceback explorer disabled by default

  New command line switch:
  --tbexplore

  Activates the traceback explorer on program failure. To change the
  default behavior add tbexplore=True to your .nutilsrc file.


New: rich output

  New command line switch:
  --richoutput

  Activates color and unicode output. To change the default behavior add
  richoutput=True to your .nutilsrc file.


Changed: breakpoint

  Old syntax
  >> util.breakpoint()

  New syntax
  >> debug.breakpoint()


Changed: log context

  Old syntax:
  >> def myfunc( arg1, arg2, .. ):
  >>   log.context( 'myfunc' )

  New syntax:
  >> @log.title
  >> def myfunc( arg1, arg2, .. ):

  The log.title decorator adds a 'title' argument which defaults to the
  name of the function, and sets a logger context accordingly upon
  calling.


Changed: properties

  Old syntax:
  >> from nutils import prop
  >> prop.mysetting = 1
  ..
  >> print prop.mysetting

  New syntax:
  >> __mysetting__ = 1
  ..
  >> from nutils import core
  >> print core.getprop( 'mysetting' )

  Properties provide a flexible mechanism for making arbitrary settings
  available to functions in nested scope, but not the calling scope.
  They act like globals but the usual downsides [1].

  [1] http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil




Release history
---------------

2014-08-04 Released v1.0 "Bakmi"


vim:textwidth=72
